{"version":3,"sources":["componentes/charts/donutChart.jsx","componentes/common/tools/webServiceConfig.js","componentes/common/home.jsx","componentes/common/tools/webSocketConfig.js","entities/message.js","componentes/common/tools/stompClientTools.js","componentes/chat/chatMessage.jsx","componentes/chat/chatRoom.jsx","componentes/chat/chatBody.jsx","componentes/main.jsx","componentes/common/footer.jsx","componentes/common/header.jsx","serviceWorker.js","index.js","static/img/user_image.png"],"names":["DonutChart","props","chartRef","React","createRef","concepto","colors","this","drawChart","data","cantidades","forEach","cantidad","push","procedencia","descripcion","total","index","getData","color","d3","domain","range","radius","Math","min","numberFormat","Intl","NumberFormat","tipo","style","currency","refAccess","current","append","attr","text","format","getTotal","data_ready","value","d","pie","selectAll","enter","innerRadius","outerRadius","key","labels","i","labelText","toString","ref","display","Component","PETICIONES","Home","state","rawData","axios","get","webConfig","then","responce","setState","catch","console","log","className","map","MESSAGE_TYPES","Message","uname","message","type","stompClientConnection","StompClientConnector","suscriveURL","serverUrl","topic","onConnect","stompClient","subscribe","onMessageReceived","send","JSON","stringify","wsConfig","onError","error","payload","parse","body","connect","randomColor","randomBackground","e","preventDefault","socket","SockJS","Stomp","over","floor","random","event","sendURL","msg","chatMessage","getStompClient","ChatMessage","messageBody","bgc","gackGroundColor","backgroundColor","ChatRoom","messages","scrollToMyRef","handleSend","stompClientP","handleChange","target","handleKeyPressed","scroll","chatContainer","scrollHeight","clientHeight","scrollTo","userAlias","placeholder","onChange","onKeyPress","class","onClick","icon","faCommentDots","ChatBody","toggle","registeredUser","callbackFunctionRegistry","childData","handleClick","handleRegistry","registry","id","chatContent","chatWindow","faComment","MainPage","path","exact","component","Footer","href","Header","src","user_image","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8164e3d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nclass DonutChart extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.chartRef = React.createRef();\r\n        this.concepto = props.concepto;\r\n        this.colors = props.colors;\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.drawChart();\r\n    }\r\n\r\n    getData(){\r\n        let data = [];\r\n        this.concepto.cantidades.forEach(cantidad => {\r\n            data.push({procedencia: cantidad.procedencia.descripcion, cantidad: cantidad.cantidad});\r\n        });\r\n        return data;\r\n    }\r\n\r\n    getTotal(){\r\n        let total = 0;\r\n        this.concepto.cantidades.forEach((cantidad, index) => {\r\n            total += cantidad.cantidad;\r\n        });\r\n        return total;\r\n    }\r\n\r\n    /*componentToHex(c) {\r\n        var hex = c.toString(16);\r\n        return hex.length == 1 ? \"0\" + hex : hex;\r\n    }\r\n      \r\n    rgbToHex(r, g, b) {\r\n        return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\r\n    }*/\r\n\r\n    drawChart(){\r\n        var data = this.getData();\r\n        var color = d3.scaleOrdinal()\r\n        .domain(data)\r\n        .range(this.colors);\r\n        \r\n        var width = 250;\r\n        var height = 250;\r\n        var margin = 10;\r\n        var radius = Math.min(width, height) / 2 - margin;\r\n        \r\n        var numberFormat = new Intl.NumberFormat('es-ES');\r\n        if(this.concepto.tipo == 0){\r\n            numberFormat = new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' });\r\n        }\r\n        let refAccess = d3.select(this.chartRef.current)\r\n        .append(\"svg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .append(\"g\")\r\n        .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\r\n        refAccess.append(\"text\")\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .text(this.concepto.descripcion)\r\n        .attr(\"fill\", \"#b0b0b0\")\r\n        .attr('dy', '-1em');\r\n        refAccess.append(\"text\")\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"font-size\", \"20px\")\r\n        .text(numberFormat.format(this.getTotal()));\r\n\r\n\r\n        var pie = d3.pie()\r\n        .value(function(d) {return d.value.cantidad; })\r\n        var data_ready = pie(d3.entries(data));\r\n\r\n        refAccess.selectAll('whatever')\r\n        .data(data_ready)\r\n        .enter()\r\n        .append('path')\r\n        .attr('d', d3.arc()\r\n          .innerRadius(100)\r\n          .outerRadius(radius)\r\n        )\r\n        .attr('fill', function(d){ return(color(d.data.key)) })\r\n        .style(\"opacity\", 0.7);\r\n        var labels = d3.select(this.chartRef.current)\r\n        .append(\"svg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", 40)\r\n        .append(\"g\")\r\n        .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 12 + \")\");\r\n        data.forEach((d, i) =>{\r\n            var labelText = labels\r\n            .append(\"text\")\r\n            .text(d.procedencia)\r\n            .attr(\"fill\", color(i.toString()))\r\n            .attr(\"font-size\", \"20px\");\r\n            if(i <= 0){\r\n                labelText.attr(\"dx\", \"-5em\");\r\n                \r\n            }\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div ref={this.chartRef} style={{display:\"grid\"}}>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DonutChart","const SERVER_URL = \"http://localhost:8080\";\r\nconst PETICIONES = {\r\n    \"GET_CONCEPTOS\": \"/diagramas/conceptos\"\r\n};\r\n\r\nexport {SERVER_URL, PETICIONES};","import React from 'react';\r\nimport '../../css/home.css';\r\nimport DonutChart from '../charts/donutChart';\r\nimport axios from 'axios';\r\nimport * as webConfig from '../common/tools/webServiceConfig.js';\r\n\r\nclass Home extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {rawData: []};\r\n        this.colors = \r\n            [\r\n                [\"hsl(80, 100%, 50%)\", \"hsl(80, 100%, 28%)\"], \r\n                [\"hsl(190, 100%, 50%)\", \"hsl(190, 100%, 20%)\"], \r\n                [\"hsl(50, 100%, 50%)\", \"hsl(15, 100%, 45%)\"]\r\n            ];\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios\r\n        .get(webConfig.SERVER_URL + webConfig.PETICIONES.GET_CONCEPTOS)\r\n        .then(responce=>{\r\n            this.setState({rawData: responce.data});\r\n        })\r\n        .catch(console.log(\"Error\"));\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    {this.state.rawData.map((concepto, index) => (\r\n                        <div className=\"col-sm-4 col-md-4\">\r\n                            <DonutChart colors={this.colors[index]} concepto={concepto}></DonutChart>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","const SUSCRIVE_URL = \"/app/chat.register\";\r\nconst SEVER_URL = \"/xinderal/chat\";\r\nconst TOPIC_URL = \"/topic/public\";\r\nconst CHAT_URL = \"/app/chat.send\";\r\nconst MESSAGE_TYPES = {\r\n    \"JOIN\": 1,\r\n    \"MESSAGE\":2\r\n}\r\n\r\nexport {SUSCRIVE_URL, SEVER_URL, TOPIC_URL, CHAT_URL, MESSAGE_TYPES}\r\n","/**El model del mensaje a ser enviado por el websocket \r\n * Recibe: @uname el nombre del usuario que se conecta,\r\n *  @message el mensaje a enviar,\r\n *  @type el tipo de mensaje enviado,\r\n *  @color el color con el que se identificara el usuario\r\n*/\r\nclass Message{\r\n    constructor(uname, message, type, color){\r\n        this.uname = uname;\r\n        this.message = message;\r\n        this.type = type;\r\n        this.color = color;\r\n    }\r\n}\r\n\r\nexport default Message;","import SockJS from 'sockjs-client'\r\nimport Stomp from 'stompjs'\r\nimport * as wsConfig from './webSocketConfig.js';\r\nimport Message from '../../../entities/message.js';\r\n//Variable que contendra una instancia de StompClientConnector\r\nlet stompClientConnection = null;\r\n/*La clase se encarga de realizar la gestion de las conexiones por websockets usando Stomp y SockJS para acceder al broker, registrar usuarios\r\nenviar y recibir mensajes*/\r\nclass StompClientConnector{\r\n    constructor(uname, suscriveURL, serverUrl, topic){\r\n        this.uname = uname;\r\n        this.stompClient = null;\r\n        this.suscriveURL = suscriveURL;\r\n        this.serverUrl = serverUrl;\r\n        this.topic = topic;\r\n        this.connect();\r\n        let randomColor = this.randomBackground();\r\n        this.color = `${randomColor[0]},${randomColor[1]},${randomColor[2]}`;\r\n    }\r\n\r\n    onConnect = () =>{\r\n        this.stompClient.subscribe(this.topic, this.onMessageReceived);\r\n        this.stompClient.send(this.suscriveURL,\r\n            {},\r\n            JSON.stringify(new Message(this.uname, null, wsConfig.MESSAGE_TYPES[\"JOIN\"], this.color))\r\n        );\r\n    }\r\n\r\n    onError = (error) =>{\r\n        console.log(\"error al conectarse:\" + error);\r\n    }\r\n\r\n    onMessageReceived = (payload) =>{\r\n        var message = JSON.parse(payload.body);\r\n        console.log(\"message\", message);\r\n    }\r\n\r\n    connect(e) {\r\n        if(e){\r\n            e.preventDefault();\r\n        }\r\n        if(!this.uname) {\r\n            return;\r\n        }\r\n        let socket = new SockJS(this.serverUrl);\r\n        this.stompClient = Stomp.over(socket);\r\n        this.stompClient.connect({}, this.onConnect, this.onError);\r\n    }\r\n\r\n    randomBackground(){\r\n        return [Math.floor(Math.random() * 127), Math.floor(Math.random() * 127), Math.floor(Math.random() * 127)];\r\n    }\r\n\r\n    send(event, message, sendURL){\r\n        event.preventDefault();\r\n        let msg = message;\r\n        if(msg && this.stompClient) {\r\n            var chatMessage = new Message(this.uname, msg, wsConfig.MESSAGE_TYPES[\"MESSAGE\"], this.color);\r\n            this.stompClient.send(sendURL, {}, JSON.stringify(chatMessage));\r\n        }\r\n    }\r\n}\r\n\r\n/**El metodo regresara una instancia de StompClientConnector, lo que genera una conexion stomp para administrar los registros y los mensajes\r\n * Recibe:\r\n *   @uname el nomnbre de usuario de la persona que desea conectarse,\r\n *   @suscriveURL la URL donde se hara la suscripcion,\r\n *   @serverUrl la url del broker, \r\n *   @topic la URL del tema donde se hara la conexion\r\n * Regresa:\r\n *  Una instancia de StompClientConnector con una conexion stomp lista para enviar y recibir mensajes\r\n */\r\nfunction getStompClient(uname) {\r\n    if(!stompClientConnection){\r\n        stompClientConnection = new StompClientConnector(uname, wsConfig.SUSCRIVE_URL, wsConfig.SEVER_URL, wsConfig.TOPIC_URL);\r\n    }\r\n    return stompClientConnection;\r\n}\r\n\r\nexport default getStompClient;","import React from 'react';\r\nimport '../../css/chatMessage.css';\r\nimport {MESSAGE_TYPES} from '../common/tools/webSocketConfig.js';\r\n\r\nclass ChatMessage extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            messageBody: props.messageBody\r\n        };\r\n        this.bgc = props.gackGroundColor;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"media message-container\">\r\n                <div style={{backgroundColor: `RGB(${this.state.messageBody.color})`}} className=\"mr-3 user-view\">{this.state.messageBody.uname[0]}</div>\r\n                <div className=\"media-body\">\r\n                    <div className=\"mt-0\">{this.state.messageBody.type === MESSAGE_TYPES.JOIN ? `${this.state.messageBody.uname} se ha unido`: this.state.messageBody.message}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatMessage;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCommentDots } from '@fortawesome/free-solid-svg-icons'\r\nimport getStompClient from '../common/tools/stompClientTools.js';\r\nimport ChatMessage from './chatMessage';\r\nimport '../../css/chatRoom.css';\r\n\r\nclass ChatRoom extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            stompClientP: getStompClient(props.uname),\r\n            message: null,\r\n            messages: [],\r\n            userAlias: props.uname[0]\r\n        }\r\n        this.state.stompClientP.onMessageReceived = this.onMessageReceived;\r\n        this.chatContainer = React.createRef();\r\n    }\r\n\r\n    onMessageReceived = (payload) =>{\r\n        var message = JSON.parse(payload.body);\r\n        this.state.messages.push(message);\r\n        this.setState({messages: this.state.messages}, ()=> this.scrollToMyRef());\r\n    }\r\n\r\n    handleSend = (e) =>{\r\n        e.preventDefault();\r\n        this.state.stompClientP.send(e, this.state.message, \"/app/chat.send\");\r\n        this.setState({message:\"\"}, ()=> this.scrollToMyRef());\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({message: e.target.value});\r\n    }\r\n\r\n    handleKeyPressed = (event) =>{\r\n        if(event.key === \"Enter\"){\r\n            this.handleSend(event);\r\n        }\r\n    }\r\n\r\n    scrollToMyRef = () => {\r\n        const scroll = this.chatContainer.current.scrollHeight - this.chatContainer.current.clientHeight;\r\n        this.chatContainer.current.scrollTo(0, scroll);\r\n    };\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"row chat-room\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body messages-container\" ref={this.chatContainer}>\r\n                        {this.state.messages.map(message => (\r\n                            <ChatMessage messageBody={message}/>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"card-body chatInput\">\r\n                        <form className=\"form-inline\">\r\n                            <div className=\"form-group mx-sm-3 mb-2\">\r\n                                <input \r\n                                    type=\"text\" \r\n                                    className=\"form-control\" \r\n                                    placeholder=\"Mensaje\" \r\n                                    value={this.state.message} \r\n                                    onChange={this.handleChange}\r\n                                    onKeyPress={this.handleKeyPressed}/>\r\n                            </div>\r\n                            <button \r\n                                type=\"button\" \r\n                                class=\"btn btn-primary mb-2\"\r\n                                onClick={(e) => {this.handleSend(e)}}>\r\n                                    <FontAwesomeIcon icon={faCommentDots}/>\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatRoom;","import React from 'react';\r\nimport ChatRoom from '../chat/chatRoom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faComment } from '@fortawesome/free-solid-svg-icons'\r\nimport getStompClient from '../common/tools/stompClientTools.js';\r\n\r\nclass ChatBody extends React.Component{\r\n    state = {\r\n        toggle: false,\r\n        registeredUser: false,\r\n        stompClient: null,\r\n        uname:\"\"\r\n    }\r\n    \r\n    callbackFunctionRegistry = (childData) => {\r\n        this.setState({registeredUser: childData.registeredUser});\r\n    }\r\n    handleClick = () => {\r\n        this.setState({toggle: !this.state.toggle})\r\n    }\r\n    handleRegistry = (e) =>{\r\n        e.preventDefault();\r\n        if(this.state.uname){\r\n            this.setState({stompClient: getStompClient(this.state.uname), registeredUser: this.state.uname !== \"\"})\r\n        }\r\n    }\r\n    handleChange = (event) => {\r\n        this.setState({uname: event.target.value});\r\n    }\r\n    \r\n    render() {\r\n        let registry = \r\n        <div className=\"container-fluid\">\r\n            <form>\r\n                <div className=\"form-group\">\r\n                    <label>Usuario</label>\r\n                    <input className=\"form-control\" id=\"uname\" type=\"text\" value={this.state.uname} onChange={this.handleChange}></input>\r\n                </div>\r\n                <button \r\n                    type=\"buton\"\r\n                    className=\"btn btn-primary\" \r\n                    onClick={(e) => {this.handleRegistry(e)}}>\r\n                    Registrarse\r\n                </button>\r\n            </form>\r\n        </div>;\r\n\r\n        let chatContent = null;\r\n        if(this.state.registeredUser){\r\n            chatContent = <ChatRoom uname = {this.state.uname}/>;\r\n        }else{\r\n            chatContent = registry;\r\n        }\r\n\r\n        let chatWindow = \r\n        <div className=\"row\" style={this.state.toggle ? {} : {display:'none'}}>\r\n            {chatContent}\r\n        </div>;\r\n\r\n        return (\r\n            <div className=\"fixed-bottom d-flex align-items-end flex-column\">\r\n                {chatWindow}\r\n                <button onClick={() => {this.handleClick()}} type=\"button\" className=\"btn btn-info\"><FontAwesomeIcon icon={faComment}/> Chat</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatBody;","import React from 'react';\r\nimport Home from './common/home';\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport ChatBody from './chat/chatBody'\r\n\r\nfunction MainPage(){\r\n    return(\r\n        <Router>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <Switch>\r\n                        <Route path=\"/\" exact component={Home}/>\r\n                    </Switch>\r\n                    <ChatBody/>\r\n                </div>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\r\nimport '../../css/footer.css';\r\n\r\nfunction Footer(){\r\n    return(\r\n        <div className=\"footer-copyright text-center py-3 fixed-bottom end-page\">© 2020 Copyright:\r\n            <a className=\"autor-tag\" href=\"#\"> Tona</a>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport '../../css/header.css';\r\nimport user_image from '../../static/img/user_image.png'\r\n\r\nfunction Header(){\r\n    return(\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <nav className=\"navbar navbar-expand-lg navbar-light bg-light justify-content-between\">\r\n                        <a className=\"navbar-brand\" href=\"#\">Navbar</a>\r\n                        <div className=\"user-account-component row\">\r\n                            <img src={user_image} className=\"img-thumbnail user-img\"/>\r\n                            <div className=\"user-info\">\r\n                                <div className=\"row\">\r\n                                    <span>Usuario</span>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <a href=\"#\">Cuenta</a>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <nav className=\"navbar navbar-expand-lg navbar-light bg-light justify-content-between\">\r\n                        <a className=\"navbar-brand\" href=\"#\">Ubicación</a>\r\n                        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                            <span className=\"navbar-toggler-icon\"></span>\r\n                        </button>\r\n                        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                            <ul className=\"navbar-nav mr-auto\">\r\n                                <li className=\"nav-item active\">\r\n                                    <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </nav>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainPage from './componentes/main';\nimport Footer from './componentes/common/footer';\nimport Header from './componentes/common/header';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Header/>,\n  document.getElementById('header')\n);\nReactDOM.render(\n  <MainPage/>,\n  document.getElementById('root')\n);\nReactDOM.render(\n  <Footer/>,\n  document.getElementById('footer')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/user_image.cc219bc5.png\";"],"sourceRoot":""}