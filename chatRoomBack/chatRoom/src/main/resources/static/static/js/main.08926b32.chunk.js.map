{"version":3,"sources":["componentes/common/home.jsx","componentes/common/tools/webSocketConfig.js","entities/message.js","componentes/common/tools/stompClientTools.js","componentes/chat/chatRegistry.jsx","componentes/chat/chatMessage.jsx","componentes/chat/chatRoom.jsx","componentes/chat/chatBody.jsx","componentes/main.jsx","componentes/common/footer.jsx","componentes/common/header.jsx","serviceWorker.js","index.js","static/img/user_image.png"],"names":["Home","className","MESSAGE_TYPES","Message","uname","message","type","color","this","stompClientConnection","StompClientConnector","suscriveURL","serverUrl","topic","onConnect","stompClient","subscribe","onMessageReceived","send","JSON","stringify","wsConfig","onError","error","console","log","payload","parse","body","connect","randomColor","randomBackground","e","preventDefault","socket","SockJS","Stomp","over","Math","floor","random","event","sendURL","msg","chatMessage","getStompClient","React","Component","ChatMessage","props","state","messageBody","bgc","gackGroundColor","style","backgroundColor","ChatRoom","messages","push","setState","scrollToMyRef","handleSend","stompClientP","handleChange","target","value","handleKeyPressed","key","scroll","chatContainer","current","scrollHeight","clientHeight","scrollTo","userAlias","createRef","ref","map","placeholder","onChange","onKeyPress","class","onClick","icon","faCommentDots","ChatBody","toggle","registeredUser","callbackFunctionRegistry","childData","handleClick","handleRegistry","registry","id","chatContent","chatWindow","display","faComment","MainPage","path","exact","component","Footer","href","Header","src","user_image","data-toggle","data-target","aria-controls","aria-expanded","aria-label","role","aria-haspopup","aria-labelledby","tabIndex","aria-disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.08926b32.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Home(){\r\n    return(\r\n        <div className=\"container-fluid\">\r\n            Hola mundo\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","const SUSCRIVE_URL = \"/app/chat.register\";\r\nconst SEVER_URL = \"/xinderal/chat\";\r\nconst TOPIC_URL = \"/topic/public\";\r\nconst CHAT_URL = \"/app/chat.send\";\r\nconst MESSAGE_TYPES = {\r\n    \"JOIN\": 1,\r\n    \"MESSAGE\":2\r\n}\r\n\r\nexport {SUSCRIVE_URL, SEVER_URL, TOPIC_URL, CHAT_URL, MESSAGE_TYPES}\r\n","/**El model del mensaje a ser enviado por el websocket \r\n * Recibe: @uname el nombre del usuario que se conecta,\r\n *  @message el mensaje a enviar,\r\n *  @type el tipo de mensaje enviado,\r\n *  @color el color con el que se identificara el usuario\r\n*/\r\nclass Message{\r\n    constructor(uname, message, type, color){\r\n        this.uname = uname;\r\n        this.message = message;\r\n        this.type = type;\r\n        this.color = color;\r\n    }\r\n}\r\n\r\nexport default Message;","import SockJS from 'sockjs-client'\r\nimport Stomp from 'stompjs'\r\nimport * as wsConfig from './webSocketConfig.js';\r\nimport Message from '../../../entities/message.js';\r\n//Variable que contendra una instancia de StompClientConnector\r\nlet stompClientConnection = null;\r\n/*La clase se encarga de realizar la gestion de las conexiones por websockets usando Stomp y SockJS para acceder al broker, registrar usuarios\r\nenviar y recibir mensajes*/\r\nclass StompClientConnector{\r\n    constructor(uname, suscriveURL, serverUrl, topic){\r\n        this.uname = uname;\r\n        this.stompClient = null;\r\n        this.suscriveURL = suscriveURL;\r\n        this.serverUrl = serverUrl;\r\n        this.topic = topic;\r\n        this.connect();\r\n        let randomColor = this.randomBackground();\r\n        this.color = `${randomColor[0]},${randomColor[1]},${randomColor[2]}`;\r\n    }\r\n\r\n    onConnect = () =>{\r\n        this.stompClient.subscribe(this.topic, this.onMessageReceived);\r\n        this.stompClient.send(this.suscriveURL,\r\n            {},\r\n            JSON.stringify(new Message(this.uname, null, wsConfig.MESSAGE_TYPES[\"JOIN\"], this.color))\r\n        );\r\n    }\r\n\r\n    onError = (error) =>{\r\n        console.log(\"error al conectarse:\" + error);\r\n    }\r\n\r\n    onMessageReceived = (payload) =>{\r\n        var message = JSON.parse(payload.body);\r\n        console.log(\"message\", message);\r\n    }\r\n\r\n    connect(e) {\r\n        if(e){\r\n            e.preventDefault();\r\n        }\r\n        if(!this.uname) {\r\n            return;\r\n        }\r\n        let socket = new SockJS(this.serverUrl);\r\n        this.stompClient = Stomp.over(socket);\r\n        this.stompClient.connect({}, this.onConnect, this.onError);\r\n    }\r\n\r\n    randomBackground(){\r\n        return [Math.floor(Math.random() * 127), Math.floor(Math.random() * 127), Math.floor(Math.random() * 127)];\r\n    }\r\n\r\n    send(event, message, sendURL){\r\n        event.preventDefault();\r\n        let msg = message;\r\n        if(msg && this.stompClient) {\r\n            var chatMessage = new Message(this.uname, msg, wsConfig.MESSAGE_TYPES[\"MESSAGE\"], this.color);\r\n            this.stompClient.send(sendURL, {}, JSON.stringify(chatMessage));\r\n        }\r\n    }\r\n}\r\n\r\n/**El metodo regresara una instancia de StompClientConnector, lo que genera una conexion stomp para administrar los registros y los mensajes\r\n * Recibe:\r\n *   @uname el nomnbre de usuario de la persona que desea conectarse,\r\n *   @suscriveURL la URL donde se hara la suscripcion,\r\n *   @serverUrl la url del broker, \r\n *   @topic la URL del tema donde se hara la conexion\r\n * Regresa:\r\n *  Una instancia de StompClientConnector con una conexion stomp lista para enviar y recibir mensajes\r\n */\r\nfunction getStompClient(uname) {\r\n    if(!stompClientConnection){\r\n        stompClientConnection = new StompClientConnector(uname, wsConfig.SUSCRIVE_URL, wsConfig.SEVER_URL, wsConfig.TOPIC_URL);\r\n    }\r\n    return stompClientConnection;\r\n}\r\n\r\nexport default getStompClient;","import React from 'react';\r\nimport getStompClient from '../common/tools/stompClientTools.js';\r\n\r\nclass Registry extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            registeredUser: false,\r\n            uname:\"\",\r\n            stompClient: null\r\n        }\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        e.preventDefault();\r\n        if(this.state.uname){\r\n            this.setState({stompClient: getStompClient(this.state.uname), registeredUser: this.state.uname !== \"\"})\r\n            console.log(this.props);\r\n            this.props.parentCallback(this.state);\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({uname: event.target.value});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                <form>\r\n                    <div className=\"form-group\">\r\n                        <label>Usuario</label>\r\n                        <input className=\"form-control\" id=\"uname\" type=\"text\" value={this.state.uname} onChange={this.handleChange}></input>\r\n                    </div>\r\n                    <button \r\n                        type=\"buton\"\r\n                        className=\"btn btn-primary\" \r\n                        onClick={(e) => {this.handleClick(e)}}>\r\n                        Registrarse\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Registry;","import React from 'react';\r\nimport '../../css/chatMessage.css';\r\nimport {MESSAGE_TYPES} from '../common/tools/webSocketConfig.js';\r\n\r\nclass ChatMessage extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            messageBody: props.messageBody\r\n        };\r\n        this.bgc = props.gackGroundColor;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"media message-container\">\r\n                <div style={{backgroundColor: `RGB(${this.state.messageBody.color})`}} className=\"mr-3 user-view\">{this.state.messageBody.uname[0]}</div>\r\n                <div className=\"media-body\">\r\n                    <div className=\"mt-0\">{this.state.messageBody.type === MESSAGE_TYPES.JOIN ? `${this.state.messageBody.uname} se ha unido`: this.state.messageBody.message}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatMessage;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCommentDots } from '@fortawesome/free-solid-svg-icons'\r\nimport getStompClient from '../common/tools/stompClientTools.js';\r\nimport ChatMessage from './chatMessage';\r\nimport '../../css/chatRoom.css';\r\n\r\nclass ChatRoom extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            stompClientP: getStompClient(props.uname),\r\n            message: null,\r\n            messages: [],\r\n            userAlias: props.uname[0]\r\n        }\r\n        this.state.stompClientP.onMessageReceived = this.onMessageReceived;\r\n        this.chatContainer = React.createRef();\r\n    }\r\n\r\n    onMessageReceived = (payload) =>{\r\n        var message = JSON.parse(payload.body);\r\n        this.state.messages.push(message);\r\n        this.setState({messages: this.state.messages}, ()=> this.scrollToMyRef());\r\n    }\r\n\r\n    handleSend = (e) =>{\r\n        e.preventDefault();\r\n        this.state.stompClientP.send(e, this.state.message, \"/app/chat.send\");\r\n        this.setState({message:\"\"}, ()=> this.scrollToMyRef());\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({message: e.target.value});\r\n    }\r\n\r\n    handleKeyPressed = (event) =>{\r\n        if(event.key === \"Enter\"){\r\n            this.handleSend(event);\r\n        }\r\n    }\r\n\r\n    scrollToMyRef = () => {\r\n        const scroll = this.chatContainer.current.scrollHeight - this.chatContainer.current.clientHeight;\r\n        this.chatContainer.current.scrollTo(0, scroll);\r\n    };\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"row chat-room\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body messages-container\" ref={this.chatContainer}>\r\n                        {this.state.messages.map(message => (\r\n                            <ChatMessage messageBody={message}/>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"card-body chatInput\">\r\n                        <form className=\"form-inline\">\r\n                            <div className=\"form-group mx-sm-3 mb-2\">\r\n                                <input \r\n                                    type=\"text\" \r\n                                    className=\"form-control\" \r\n                                    placeholder=\"Mensaje\" \r\n                                    value={this.state.message} \r\n                                    onChange={this.handleChange}\r\n                                    onKeyPress={this.handleKeyPressed}/>\r\n                            </div>\r\n                            <button \r\n                                type=\"button\" \r\n                                class=\"btn btn-primary mb-2\"\r\n                                onClick={(e) => {this.handleSend(e)}}>\r\n                                    <FontAwesomeIcon icon={faCommentDots}/>\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatRoom;","import React from 'react';\r\nimport ChatRoom from '../chat/chatRoom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faComment } from '@fortawesome/free-solid-svg-icons'\r\nimport getStompClient from '../common/tools/stompClientTools.js';\r\n\r\nclass ChatBody extends React.Component{\r\n    state = {\r\n        toggle: false,\r\n        registeredUser: false,\r\n        stompClient: null,\r\n        uname:\"\"\r\n    }\r\n    \r\n    callbackFunctionRegistry = (childData) => {\r\n        this.setState({registeredUser: childData.registeredUser});\r\n    }\r\n    handleClick = () => {\r\n        this.setState({toggle: !this.state.toggle})\r\n    }\r\n    handleRegistry = (e) =>{\r\n        e.preventDefault();\r\n        if(this.state.uname){\r\n            this.setState({stompClient: getStompClient(this.state.uname), registeredUser: this.state.uname !== \"\"})\r\n        }\r\n    }\r\n    handleChange = (event) => {\r\n        this.setState({uname: event.target.value});\r\n    }\r\n    \r\n    render() {\r\n        let registry = \r\n        <div className=\"container-fluid\">\r\n            <form>\r\n                <div className=\"form-group\">\r\n                    <label>Usuario</label>\r\n                    <input className=\"form-control\" id=\"uname\" type=\"text\" value={this.state.uname} onChange={this.handleChange}></input>\r\n                </div>\r\n                <button \r\n                    type=\"buton\"\r\n                    className=\"btn btn-primary\" \r\n                    onClick={(e) => {this.handleRegistry(e)}}>\r\n                    Registrarse\r\n                </button>\r\n            </form>\r\n        </div>;\r\n\r\n        let chatContent = null;\r\n        if(this.state.registeredUser){\r\n            chatContent = <ChatRoom uname = {this.state.uname}/>;\r\n        }else{\r\n            chatContent = registry;\r\n        }\r\n\r\n        let chatWindow = \r\n        <div className=\"row\" style={this.state.toggle ? {} : {display:'none'}}>\r\n            {chatContent}\r\n        </div>;\r\n\r\n        return (\r\n            <div className=\"fixed-bottom d-flex align-items-end flex-column\">\r\n                {chatWindow}\r\n                <button onClick={() => {this.handleClick()}} type=\"button\" className=\"btn btn-info\"><FontAwesomeIcon icon={faComment}/> Chat</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatBody;","import React from 'react';\r\nimport Home from './common/home';\r\nimport Registry from './chat/chatRegistry';\r\nimport ChatRoom from './chat/chatRoom';\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport ChatBody from './chat/chatBody'\r\n\r\nfunction MainPage(){\r\n    return(\r\n        <Router>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <Switch>\r\n                        <Route path=\"/\" exact component={Home}/>\r\n                    </Switch>\r\n                    <ChatBody/>\r\n                </div>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\r\n\r\nfunction Footer(){\r\n    return(\r\n        <footer>\r\n             <div className=\"footer-copyright text-center py-3\">© 2020 Copyright:\r\n                <a href=\"#\"> Tona</a>\r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport '../../css/header.css';\r\nimport user_image from '../../static/img/user_image.png'\r\n\r\nfunction Header(){\r\n    return(\r\n        <header className=\"page-header\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <nav className=\"navbar navbar-expand-lg navbar-light bg-light justify-content-between\">\r\n                            <a className=\"navbar-brand\" href=\"#\">Navbar</a>\r\n                            <div className=\"user-account-component row\">\r\n                                <img src={user_image} className=\"img-thumbnail user-img\"/>\r\n                                <div className=\"user-info\">\r\n                                    <div className=\"row\">\r\n                                        <span>Usuario</span>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <a href=\"#\">Cuenta</a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </nav>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <nav className=\"navbar navbar-expand-lg navbar-light bg-light justify-content-between\">\r\n                            <a className=\"navbar-brand\" href=\"#\">Ubicación</a>\r\n                            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                                <span className=\"navbar-toggler-icon\"></span>\r\n                            </button>\r\n                            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                                <ul className=\"navbar-nav mr-auto\">\r\n                                    <li className=\"nav-item active\">\r\n                                        <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n                                    </li>\r\n                                    <li className=\"nav-item\">\r\n                                        <a className=\"nav-link\" href=\"#\">Link</a>\r\n                                    </li>\r\n                                    <li className=\"nav-item dropdown\">\r\n                                        <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                        Dropdown\r\n                                        </a>\r\n                                        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                                        <a className=\"dropdown-item\" href=\"#\">Action</a>\r\n                                        <a className=\"dropdown-item\" href=\"#\">Another action</a>\r\n                                        <div className=\"dropdown-divider\"></div>\r\n                                        <a className=\"dropdown-item\" href=\"#\">Something else here</a>\r\n                                        </div>\r\n                                    </li>\r\n                                    <li className=\"nav-item\">\r\n                                        <a className=\"nav-link disabled\" href=\"#\" tabIndex=\"-1\" aria-disabled=\"true\">Disabled</a>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </nav>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainPage from './componentes/main';\nimport Footer from './componentes/common/footer';\nimport Header from './componentes/common/header';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Header/>,\n  document.getElementById('header')\n);\nReactDOM.render(\n  <MainPage/>,\n  document.getElementById('root')\n);\nReactDOM.render(\n  <Footer/>,\n  document.getElementById('footer')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/user_image.cc219bc5.png\";"],"sourceRoot":""}